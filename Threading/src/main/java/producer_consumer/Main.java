package producer_consumer;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

// Producer: Nh√† s·∫£n xu·∫•t
class Producer extends Thread {
    private final BlockingQueue<Integer> queue;

    public Producer(BlockingQueue<Integer> queue) {
        this.queue = queue;
    }

    @Override
    public void run() {
        for (int i = 1; i <= 10; i++) { // S·∫£n xu·∫•t 10 s·∫£n ph·∫©m
            try {
                System.out.println("üõ†Ô∏è Producer t·∫°o s·∫£n ph·∫©m: " + i);
                queue.put(i); // ƒê∆∞a s·∫£n ph·∫©m v√†o kho (ch·ªù n·∫øu kho ƒë·∫ßy)
                Thread.sleep(500); // Gi·∫£ l·∫≠p th·ªùi gian s·∫£n xu·∫•t
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}

// Consumer: Ng∆∞·ªùi ti√™u d√πng
class Consumer extends Thread {
    private final BlockingQueue<Integer> queue;

    public Consumer(BlockingQueue<Integer> queue) {
        this.queue = queue;
    }

    @Override
    public void run() {
        while (true) {
            try {
                int item = queue.take(); // L·∫•y s·∫£n ph·∫©m t·ª´ kho (ch·ªù n·∫øu kho r·ªóng)
                System.out.println("‚úÖ Consumer ti√™u th·ª• s·∫£n ph·∫©m: " + item);
                Thread.sleep(1000); // Gi·∫£ l·∫≠p th·ªùi gian ti√™u th·ª•
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(5); // Kho ch·ª©a t·ªëi ƒëa 5 s·∫£n ph·∫©m

        Producer producer = new Producer(queue);
        Consumer consumer = new Consumer(queue);

        producer.start();
        consumer.start();
    }
}
